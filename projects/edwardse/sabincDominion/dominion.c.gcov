        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 621461 returned 100% blocks executed 100%
   621461:    8:int compare(const void* a, const void* b) {
   621461:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
   311446:   10:    return 1;
   310015:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
   142696:   12:    return -1;
   167319:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 83%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
call    0 returned 100%
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       80:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 1218 returned 100% blocks executed 100%
     1218:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1218:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1218:  209:  if (state->deckCount[player] < 1)
branch  0 taken 24% (fallthrough)
branch  1 taken 76%
      296:  210:    return -1;
      922:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    95630:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    93786:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    93786:  216:    newDeck[newDeckPos] = state->deck[player][card];
    93786:  217:    newDeckPos++;
  7209778:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  7115992:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    93786:  221:    state->deckCount[player]--;
        -:  222:  }
    94708:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    93786:  224:    state->deck[player][i] = newDeck[i];
    93786:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      922:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 2 returned 100% blocks executed 100%
        2:  311:int numHandCards(struct gameState *state) {
        2:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 1 returned 100% blocks executed 100%
        1:  315:int handCard(int handPos, struct gameState *state) {
        1:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 13 returned 100% blocks executed 100%
       13:  320:int supplyCount(int card, struct gameState *state) {
       13:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 20017 returned 100% blocks executed 100%
    20017:  346:int whoseTurn(struct gameState *state) {
    20017:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 1 returned 100% blocks executed 93%
        1:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        1:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
        9:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        8:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        8:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        1:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        1:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        1:  370:  state->outpostPlayed = 0;
        1:  371:  state->phase = 0;
        1:  372:  state->numActions = 1;
        1:  373:  state->coins = 0;
        1:  374:  state->numBuys = 1;
        1:  375:  state->playedCardCount = 0;
        1:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
        6:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        1:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
        1:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 3 returned 100% blocks executed 100%
        3:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        2:  401:  j = 0;
       52:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
       50:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  405:	{
        3:  406:	  j++;
        -:  407:	}
        -:  408:    }
        2:  409:  if ( j >= 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  // //score from discard
        -:  433:  // for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    // {
        -:  435:      // if (state->discard[player][i] == curse) { score = score - 1; };
        -:  436:      // if (state->discard[player][i] == estate) { score = score + 1; };
        -:  437:      // if (state->discard[player][i] == duchy) { score = score + 3; };
        -:  438:      // if (state->discard[player][i] == province) { score = score + 6; };
        -:  439:      // if (state->discard[player][i] == great_hall) { score = score + 1; };
        -:  440:      // if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    // }
        -:  442:
        -:  443:  // //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
        -:  446:      // if (state->deck[player][i] == curse) { score = score - 1; };
        -:  447:      // if (state->deck[player][i] == estate) { score = score + 1; };
        -:  448:      // if (state->deck[player][i] == duchy) { score = score + 3; };
        -:  449:      // if (state->deck[player][i] == province) { score = score + 6; };
        -:  450:      // if (state->deck[player][i] == great_hall) { score = score + 1; };
        -:  451:      // if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:   return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524://yhere
function drawCard called 102810 returned 100% blocks executed 100%
   102810:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	
        -:  527:	int count;
        -:  528:	int deckCounter;
   102810:  529:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    94666:  534:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    93626:  535:      state->deck[player][i] = state->discard[player][i];
    93626:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
     1040:  539:    state->deckCount[player] = state->discardCount[player];
     1040:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
     1040:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
     1040:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
     1040:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
     1040:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
     1040:  560:    if (deckCounter == 0)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
      134:  561:      return -1;
        -:  562:
      906:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      906:  564:    state->deckCount[player]--;
      906:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
   101770:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
   101770:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
   101770:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   101770:  577:    state->deckCount[player]--;
   101770:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
   102676:  581:  return 0;
        -:  582:}
        -:  583:
function getCost called 6 returned 100% blocks executed 13%
        6:  584:int getCost(int cardNumber)
        -:  585:{
        6:  586:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 67%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 33%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
        4:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
        2:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
function cardEffect called 1 returned 100% blocks executed 9%
        1:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:  int i;
        -:  650:  int j;
        -:  651:  int k;
        -:  652:  int x;
        -:  653:  int index;
        1:  654:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  655:  int nextPlayer = currentPlayer + 1;
        -:  656:
        1:  657:  int tributeRevealedCards[2] = {-1, -1};
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
        -:  659:  //int drawntreasure=0;
        -:  660:  //int cardDrawn;
        -:  661:  //int z = 0;// this is the counter for the temp hand
        1:  662:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  663:    nextPlayer = 0;
        -:  664:  }
        -:  665:  
        -:  666:	
        -:  667:  //uses switch to select card and perform actions
        1:  668:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  669:    {
        -:  670:    case adventurer:
    #####:  671:		return PlayAdventurer(state);
call    0 never executed
        -:  672:   
        -:  673:			
        -:  674:    case council_room:
        -:  675:      
    #####:  676:	  return PlayCounselRoom(state, handPos);
call    0 never executed
        -:  677:			
        -:  678:    case feast:
        -:  679:      //gain card with cost up to 5
        -:  680:      //Backup hand
        7:  681:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6:  682:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        6:  683:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  684:      }
        -:  685:      //Backup hand
        -:  686:
        -:  687:      //Update Coins for Buy
        1:  688:      updateCoins(currentPlayer, state, 5);
call    0 returned 100%
        1:  689:      x = 1;//Condition to loop on
        3:  690:      while( x == 1) {//Buy one card
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  691:	if (supplyCount(choice1, state) <= 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  692:	  if (DEBUG)
        -:  693:	    printf("None of that card left, sorry!\n");
        -:  694:
        -:  695:	  if (DEBUG){
        -:  696:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  697:	  }
        -:  698:	}
        1:  699:	else if (state->coins < getCost(choice1)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  700:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  701:
        -:  702:	  if (DEBUG){
        -:  703:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  704:	  }
        -:  705:	}
        -:  706:	else{
        -:  707:
        -:  708:	  if (DEBUG){
        -:  709:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  710:	  }
        -:  711:
        1:  712:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100%
        1:  713:	  x = 0;//No more buying cards
        -:  714:
        -:  715:	  if (DEBUG){
        -:  716:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  717:	  }
        -:  718:
        -:  719:	}
        -:  720:      }     
        -:  721:
        -:  722:      //Reset Hand
        7:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6:  724:	state->hand[currentPlayer][i] = temphand[i];
        6:  725:	temphand[i] = -1;
        -:  726:      }
        -:  727:      //Reset Hand
        -:  728:      			
        1:  729:      return 0;
        -:  730:			
        -:  731:    case gardens:
    #####:  732:      return -1;
        -:  733:			
        -:  734:    case mine:
    #####:  735:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  736:
    #####:  737:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  738:	{
    #####:  739:	  return -1;
        -:  740:	}
        -:  741:		
    #####:  742:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  743:	{
    #####:  744:	  return -1;
        -:  745:	}
        -:  746:
    #####:  747:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  748:	{
    #####:  749:	  return -1;
        -:  750:	}
        -:  751:
    #####:  752:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  753:
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  756:
        -:  757:      //discard trashed card
    #####:  758:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  759:	{
    #####:  760:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  761:	    {
    #####:  762:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  763:	      break;
        -:  764:	    }
        -:  765:	}
        -:  766:			
    #####:  767:      return 0;
        -:  768:			
        -:  769:    case remodel:
    #####:  770:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  771:
    #####:  772:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  773:	{
    #####:  774:	  return -1;
        -:  775:	}
        -:  776:
    #####:  777:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  778:
        -:  779:      //discard card from hand
    #####:  780:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  781:
        -:  782:      //discard trashed card
    #####:  783:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  784:	{
    #####:  785:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  786:	    {
    #####:  787:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  788:	      break;
        -:  789:	    }
        -:  790:	}
        -:  791:
        -:  792:
    #####:  793:      return 0;
        -:  794:		
        -:  795:    case smithy:
    #####:  796:      return PlaySmitty(state, handPos);
call    0 never executed
        -:  797:		
        -:  798:    case village:
    #####:  799:      return PlayVillage(state, handPos);
call    0 never executed
        -:  800:		
        -:  801:    case baron:
    #####:  802:      state->numBuys++;//Increase buys by 1!
    #####:  803:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  804:	int p = 0;//Iterator for hand!
    #####:  805:	int card_not_discarded = 1;//Flag for discard set!
    #####:  806:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  807:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  808:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  809:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  810:	    state->discardCount[currentPlayer]++;
    #####:  811:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  812:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  813:	    }
    #####:  814:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  815:	    state->handCount[currentPlayer]--;
    #####:  816:	    card_not_discarded = 0;//Exit the loop
        -:  817:	  }
    #####:  818:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  819:	    if(DEBUG) {
        -:  820:	      printf("No estate cards in your hand, invalid choice\n");
        -:  821:	      printf("Must gain an estate if there are any\n");
        -:  822:	    }
    #####:  823:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  824:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  825:	      state->supplyCount[estate]--;//Decrement estates
    #####:  826:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  827:		isGameOver(state);
call    0 never executed
        -:  828:	      }
        -:  829:	    }
    #####:  830:	    card_not_discarded = 0;//Exit the loop
        -:  831:	  }
        -:  832:			    
        -:  833:	  else{
    #####:  834:	    p++;//Next card
        -:  835:	  }
        -:  836:	}
        -:  837:      }
        -:  838:			    
        -:  839:      else{
    #####:  840:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  841:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  842:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  843:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  844:	    isGameOver(state);
call    0 never executed
        -:  845:	  }
        -:  846:	}
        -:  847:      }
        -:  848:	    
        -:  849:      
    #####:  850:      return 0;
        -:  851:		
        -:  852:    case great_hall:
        -:  853:      //+1 Card
    #####:  854:      drawCard(currentPlayer, state);
call    0 never executed
        -:  855:			
        -:  856:      //+1 Actions
    #####:  857:      state->numActions++;
        -:  858:			
        -:  859:      //discard card from hand
    #####:  860:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  861:      return 0;
        -:  862:		
        -:  863:    case minion:
        -:  864:      //+1 action
    #####:  865:      state->numActions++;
        -:  866:			
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  869:			
    #####:  870:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  871:	{
    #####:  872:	  state->coins = state->coins + 2;
        -:  873:	}
        -:  874:			
    #####:  875:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  876:	{
        -:  877:	  //discard hand
    #####:  878:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  879:	    {
    #####:  880:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  881:	    }
        -:  882:				
        -:  883:	  //draw 4
    #####:  884:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  885:	    {
    #####:  886:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  887:	    }
        -:  888:				
        -:  889:	  //other players discard hand and redraw if hand size > 4
    #####:  890:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  891:	    {
    #####:  892:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  893:		{
    #####:  894:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  895:		    {
        -:  896:		      //discard hand
    #####:  897:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  898:			{
    #####:  899:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  900:			}
        -:  901:							
        -:  902:		      //draw 4
    #####:  903:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  904:			{
    #####:  905:			  drawCard(i, state);
call    0 never executed
        -:  906:			}
        -:  907:		    }
        -:  908:		}
        -:  909:	    }
        -:  910:				
        -:  911:	}
    #####:  912:      return 0;
        -:  913:		
        -:  914:    case steward:
    #####:  915:      return PlaySteward(state, choice1, choice2, choice3, handPos);
call    0 never executed
        -:  916:	  
        -:  917:    case tribute:
    #####:  918:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  919:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  920:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  921:	  state->deckCount[nextPlayer]--;
        -:  922:	}
    #####:  923:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  924:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  925:	  state->discardCount[nextPlayer]--;
        -:  926:	}
        -:  927:	else{
        -:  928:	  //No Card to Reveal
        -:  929:	  if (DEBUG){
        -:  930:	    printf("No cards to reveal\n");
        -:  931:	  }
        -:  932:	}
        -:  933:      }
        -:  934:	    
        -:  935:      else{
    #####:  936:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  937:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  938:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  939:	    state->deckCount[nextPlayer]++;
    #####:  940:	    state->discard[nextPlayer][i] = -1;
    #####:  941:	    state->discardCount[nextPlayer]--;
        -:  942:	  }
        -:  943:			    
    #####:  944:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  945:	} 
    #####:  946:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  947:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  948:	state->deckCount[nextPlayer]--;
    #####:  949:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  950:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  951:	state->deckCount[nextPlayer]--;
        -:  952:      }    
        -:  953:		       
    #####:  954:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  955:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  956:	state->playedCardCount++;
    #####:  957:	tributeRevealedCards[1] = -1;
        -:  958:      }
        -:  959:
    #####:  960:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  961:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  962:	  state->coins += 2;
        -:  963:	}
        -:  964:		    
    #####:  965:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  966:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  967:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  968:	}
        -:  969:	else{//Action Card
    #####:  970:	  state->numActions = state->numActions + 2;
        -:  971:	}
        -:  972:      }
        -:  973:	    
    #####:  974:      return 0;
        -:  975:		
        -:  976:    case ambassador:
    #####:  977:      j = 0;		//used to check if player has enough cards to discard
        -:  978:
    #####:  979:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  980:	{
    #####:  981:	  return -1;				
        -:  982:	}
        -:  983:
    #####:  984:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  985:	{
    #####:  986:	  return -1;
        -:  987:	}
        -:  988:
    #####:  989:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  990:	{
    #####:  991:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  992:	    {
    #####:  993:	      j++;
        -:  994:	    }
        -:  995:	}
    #####:  996:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  997:	{
    #####:  998:	  return -1;				
        -:  999:	}
        -: 1000:
        -: 1001:      if (DEBUG) 
        -: 1002:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1003:
        -: 1004:      //increase supply count for choosen card by amount being discarded
    #####: 1005:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1006:			
        -: 1007:      //each other player gains a copy of revealed card
    #####: 1008:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1009:	{
    #####: 1010:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1011:	    {
    #####: 1012:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1013:	    }
        -: 1014:	}
        -: 1015:
        -: 1016:      //discard played card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1018:
        -: 1019:      //trash copies of cards returned to supply
    #####: 1020:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1021:	{
    #####: 1022:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:	    {
    #####: 1024:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1025:		{
    #####: 1026:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1027:		  break;
        -: 1028:		}
        -: 1029:	    }
        -: 1030:	}			
        -: 1031:
    #####: 1032:      return 0;
        -: 1033:		
        -: 1034:    case cutpurse:
        -: 1035:
    #####: 1036:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1037:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1038:	{
    #####: 1039:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1040:	    {
    #####: 1041:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1042:		{
    #####: 1043:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1044:		    {
    #####: 1045:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1046:		      break;
        -: 1047:		    }
    #####: 1048:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1049:		    {
    #####: 1050:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1051:			{
        -: 1052:			  if (DEBUG)
        -: 1053:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1054:			}	
    #####: 1055:		      break;
        -: 1056:		    }		
        -: 1057:		}
        -: 1058:					
        -: 1059:	    }
        -: 1060:				
        -: 1061:	}				
        -: 1062:
        -: 1063:      //discard played card from hand
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1065:
    #####: 1066:      return 0;
        -: 1067:
        -: 1068:		
        -: 1069:    case embargo: 
        -: 1070:      //+2 Coins
    #####: 1071:      state->coins = state->coins + 2;
        -: 1072:			
        -: 1073:      //see if selected pile is in play
    #####: 1074:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1075:	{
    #####: 1076:	  return -1;
        -: 1077:	}
        -: 1078:			
        -: 1079:      //add embargo token to selected supply pile
    #####: 1080:      state->embargoTokens[choice1]++;
        -: 1081:			
        -: 1082:      //trash card
    #####: 1083:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case outpost:
        -: 1087:      //set outpost flag
    #####: 1088:      state->outpostPlayed++;
        -: 1089:			
        -: 1090:      //discard card
    #####: 1091:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1092:      return 0;
        -: 1093:		
        -: 1094:    case salvager:
        -: 1095:      //+1 buy
    #####: 1096:      state->numBuys++;
        -: 1097:			
    #####: 1098:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1099:	{
        -: 1100:	  //gain coins equal to trashed card
    #####: 1101:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1102:	  //trash card
    #####: 1103:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1104:	}
        -: 1105:			
        -: 1106:      //discard card
    #####: 1107:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1108:      return 0;
        -: 1109:		
        -: 1110:    case sea_hag:
    #####: 1111:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1112:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1113:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1114:	  state->discardCount[i]++;
    #####: 1115:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1116:	}
        -: 1117:      }
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case treasure_map:
        -: 1121:      //search hand for another treasure_map
    #####: 1122:      index = -1;
    #####: 1123:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	{
    #####: 1125:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1126:	    {
    #####: 1127:	      index = i;
    #####: 1128:	      break;
        -: 1129:	    }
        -: 1130:	}
    #####: 1131:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
        -: 1133:	  //trash both treasure cards
    #####: 1134:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1135:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1136:
        -: 1137:	  //gain 4 Gold cards
    #####: 1138:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1141:	    }
        -: 1142:				
        -: 1143:	  //return success
    #####: 1144:	  return 1;
        -: 1145:	}
        -: 1146:			
        -: 1147:      //no second treasure_map found in hand
    #####: 1148:      return -1;
        -: 1149:    }
        -: 1150:	
    #####: 1151:  return -1;
        -: 1152:}
        -: 1153:
function discardCard called 10002 returned 100% blocks executed 100%
    10002: 1154:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1155:{
        -: 1156:	//yhere
        -: 1157:  //if card is not trashed, added to Played pile 
    10002: 1158:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1159:    {
        -: 1160:      //add card to played pile
    10002: 1161:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    10002: 1162:      state->playedCardCount++;
        -: 1163:    }
        -: 1164:	
        -: 1165:  //set played card to -1
    10002: 1166:  state->hand[currentPlayer][handPos] = -1;
        -: 1167:	
        -: 1168:  //remove card from player's hand
    10002: 1169:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1170:    {
        -: 1171:      //reduce number of cards in hand
       42: 1172:      state->handCount[currentPlayer]--;
        -: 1173:    }
     9960: 1174:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1175:    {
        -: 1176:      //reduce number of cards in hand
        1: 1177:      state->handCount[currentPlayer]--;
        -: 1178:    }
        -: 1179:  else 	
        -: 1180:    {
        -: 1181:      //replace discarded card with last card in hand
     9959: 1182:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1183:      //set last card to -1
     9959: 1184:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1185:      //reduce number of cards in hand
     9959: 1186:      state->handCount[currentPlayer]--;
        -: 1187:    }
        -: 1188:	
    10002: 1189:  return 0;
        -: 1190:}
        -: 1191:
function gainCard called 6 returned 100% blocks executed 100%
        6: 1192:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1193:{
        -: 1194:  //Note: supplyPos is enum of choosen card
        -: 1195:	
        -: 1196:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1197:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 17% (fallthrough)
branch  2 taken 83%
        -: 1198:    {
        1: 1199:      return -1;
        -: 1200:    }
        -: 1201:	
        -: 1202:  //added card for [whoseTurn] current player:
        -: 1203:  // toFlag = 0 : add to discard
        -: 1204:  // toFlag = 1 : add to deck
        -: 1205:  // toFlag = 2 : add to hand
        -: 1206:
        5: 1207:  if (toFlag == 1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1208:    {
        1: 1209:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1210:      state->deckCount[player]++;
        -: 1211:    }
        4: 1212:  else if (toFlag == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1213:    {
        1: 1214:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1215:      state->handCount[player]++;
        -: 1216:    }
        -: 1217:  else
        -: 1218:    {
        3: 1219:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1220:      state->discardCount[player]++;
        -: 1221:    }
        -: 1222:	
        -: 1223:  //decrease number in supply pile
        5: 1224:  state->supplyCount[supplyPos]--;
        -: 1225:	 
        5: 1226:  return 0;
        -: 1227:}
        -: 1228:
function updateCoins called 10 returned 100% blocks executed 82%
       10: 1229:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1230:{
        -: 1231:  int i;
        -: 1232:	
        -: 1233:  //reset coin count
       10: 1234:  state->coins = 0;
        -: 1235:
        -: 1236:  //add coins for each Treasure card in player's hand
       60: 1237:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1238:    {
       50: 1239:      if (state->hand[player][i] == copper)
branch  0 taken 72% (fallthrough)
branch  1 taken 28%
        -: 1240:	{
       36: 1241:	  state->coins += 1;
        -: 1242:	}
       14: 1243:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1244:	{
    #####: 1245:	  state->coins += 2;
        -: 1246:	}
       14: 1247:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1248:	{
    #####: 1249:	  state->coins += 3;
        -: 1250:	}	
        -: 1251:    }	
        -: 1252:
        -: 1253:  //add bonus
       10: 1254:  state->coins += bonus;
        -: 1255:
       10: 1256:  return 0;
        -: 1257:}
        -: 1258:
function PlayVillage called 10001 returned 100% blocks executed 100%
    10001: 1259:int PlayVillage(struct gameState *state, int handPos)
        -: 1260:{
    10001: 1261:	return 0;//misplaced return statement
        -: 1262:	
        -: 1263:	int currentPlayer = whoseTurn(state);
        -: 1264:	
        -: 1265:	//+1 Card
        -: 1266:	drawCard(currentPlayer, state);
        -: 1267:		
        -: 1268:	//+2 Actions
        -: 1269:	state->numActions = state->numActions + 2;
        -: 1270:		
        -: 1271:	//discard played card from hand
        -: 1272:	discardCard(handPos, currentPlayer, state, 0);
        -: 1273:	
        -: 1274:}
        -: 1275:
        -: 1276:
function PlaySmitty called 10002 returned 100% blocks executed 100%
    10002: 1277:int PlaySmitty(struct gameState *state, int handPos)
        -: 1278:{
        -: 1279:	int i;
    10002: 1280:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1281:	//+3 Cards
    50010: 1282:      for (i = 0; i < MAX_PLAYERS; i++)//BUG: for loop will exceed number of cards in deck
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1283:	{
    40008: 1284:	 drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1285:	}
        -: 1286:			//yhere
        -: 1287:      //discard card from hand
    10002: 1288:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
    10002: 1289:      return 0;
        -: 1290:}
        -: 1291:
function PlayAdventurer called 10002 returned 100% blocks executed 94%
    10002: 1292:int PlayAdventurer(struct gameState *state)
        -: 1293:{
        -: 1294:	
    10002: 1295:	int drawntreasure=0;
    10002: 1296:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1297:	int cardDrawn;
        -: 1298:	int temphand[MAX_HAND];
    10002: 1299:	int z = 0;
        -: 1300:	
    82761: 1301:	while(drawntreasure<2){
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
    62757: 1302:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      162: 1303:			shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1304:		}
    62757: 1305:		drawCard(currentPlayer, state);
call    0 returned 100%
    62757: 1306:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    62757: 1307:	 if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 88% (fallthrough)
branch  3 taken 12%
branch  4 taken 13% (fallthrough)
branch  5 taken 87%
    20004: 1308:		drawntreasure++;
        -: 1309:	 else{
    42753: 1310:	  temphand[z]=cardDrawn;
    42753: 1311:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    42753: 1312:	  z++;
        -: 1313:	 }
        -: 1314:      }
    20004: 1315:      while(z-100>=0){//added "z-100" bug. this while loop should never get used since number is always less than 0
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1316:	  
    #####: 1317:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1318:	z=z-1;
        -: 1319:    }
    10002: 1320:    return 0;
        -: 1321:}
        -: 1322:
function PlayCounselRoom called 0 returned 0% blocks executed 0%
    #####: 1323:int PlayCounselRoom(struct gameState *state, int handPos)
        -: 1324:{
        -: 1325:	
    #####: 1326:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1327:	int i;
        -: 1328:	
        -: 1329:	
        -: 1330:	    //+4 Cards
    #####: 1331:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1332:	{
    #####: 1333:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1334:	}
        -: 1335:			
        -: 1336:      //+1 Buy
    #####: 1337:      state->numBuys++;
        -: 1338:			
        -: 1339:      //Each other player draws a card
    #####: 1340:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1341:	{
    #####: 1342:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1343:	    {
    #####: 1344:	      drawCard(i, state);
call    0 never executed
        -: 1345:	    }
        -: 1346:	}
        -: 1347:			
        -: 1348:      //put played card in played card pile
    #####: 1349:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1350:	 
    #####: 1351:	  shuffle(currentPlayer,state);//player shouldn't shuffle after turn... 
call    0 never executed
    #####: 1352:	  return 0;
        -: 1353:}
        -: 1354:
function PlaySteward called 0 returned 0% blocks executed 0%
    #####: 1355:int PlaySteward(struct gameState *state, int choice1, int choice2, int choice3, int handPos)
        -: 1356:{
    #####: 1357:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1358:	
    #####: 1359:	if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1360:	{
        -: 1361:	  //+2 cards
    #####: 1362:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1363:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1364:	}
    #####: 1365:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1366:	{
        -: 1367:	  //+2 coins
    #####: 1368:	  state->coins = state->coins + 2;
        -: 1369:	}
        -: 1370:      else
        -: 1371:	{
        -: 1372:	  //trash 2 cards in hand
    #####: 1373:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1374:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1375:	}
        -: 1376:			
        -: 1377:      //discard card from hand
    #####: 1378:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1379:      return 0;
        -: 1380:}
        -: 1381://end of dominion.c
        -: 1382:
